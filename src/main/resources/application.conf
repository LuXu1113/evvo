akka {
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
//  loggers = ["akka.event.slf4j.Slf4jLogger"]
//  loglevel = "DEBUG"

  actor {
    debug {
      // Log all messages received by a LoggingReceiver
      receive = true

      // Serialize Props before sending actors to be deployed remotely
      // Added to resolve the "java.lang.ClassCastException" about SerializedLambdas and Function0s
      serialize-creators = on
    }

    // Enables using remoting to create new actors
    provider = remote
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]

    netty.tcp {
      // Must be overriden by custom
      // hostname = ???
      // port = ???
    }

    // Log remote events: all remotely sent/received messages, and facts about the remotes.
    log-sent-messages = on
    log-received-messages = on
    log-remote-lifecycle-events = on
  }
}


RemoteActorSystem {
  hostname = "10.0.0.34"
  port = 12382

  akka {
    remote {
      netty.tcp {
        hostname = ${RemoteActorSystem.hostname}
        port = ${RemoteActorSystem.port}

        // Note that you will need to add bind-hostname and bind-port to run on
        // any instance behind a NAT/container/etc.
        // bind-hostname = "10.xx.xx.xx"
        // bind-port = ${RemoteActorSystem.port}
      }
    }
  }
}

IslandManager {
  akka {
    remote {
      netty.tcp {
        hostname = "10.0.0.34"
        port = 12381

        // Note that you will need to add bind-hostname and bind-port to run on
        // any instance behind a NAT/container/etc.
        // bind-hostname = "10.xx.xx.xx"
        // bind-port = 12381
      }
    }
  }

  nodes {
    locations = [
      "akka.tcp://RemoteEvvoNode@"${RemoteActorSystem.hostname}":"${RemoteActorSystem.port}
    ]
  }
}